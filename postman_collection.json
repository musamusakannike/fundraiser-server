{
  "info": {
    "_postman_id": "f8a7b3e5-6d21-4c9a-8f5e-9c2d7f8e4b3a",
    "name": "Nigerian Islamic Fundraiser API",
    "description": "A comprehensive collection for testing the Nigerian Islamic Fundraiser API endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Endpoints for user registration, login, and profile management",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"Test User\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\",\n    \"phoneNumber\": \"+2341234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user._id).to.be.a('string');",
                  "    ",
                  "    // Save the token and user ID for later use",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "    pm.environment.set(\"userId\", jsonData.user._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with user credentials"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    ",
                  "    // Save the token and user ID for later use",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "    pm.environment.set(\"userId\", jsonData.user._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"adminpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with admin credentials"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and admin data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user.role).to.be.oneOf(['admin', 'superadmin']);",
                  "    ",
                  "    // Save the admin token and ID for later use",
                  "    pm.environment.set(\"adminToken\", jsonData.token);",
                  "    pm.environment.set(\"adminId\", jsonData.user._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get the profile of the currently authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user._id).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"Updated Test User\",\n    \"phoneNumber\": \"+2349876543210\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/update-profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "update-profile"]
            },
            "description": "Update the profile of the currently authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "    pm.expect(jsonData.user.fullName).to.eql('Updated Test User');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"password123\",\n    \"newPassword\": \"newPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "change-password"]
            },
            "description": "Change the password of the currently authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password changed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('changed');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "description": "Endpoints for user management (admin/superadmin only)",
      "item": [
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Get a list of all users (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has users array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.users).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Admins (Superadmin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/admins",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "admins"]
            },
            "description": "Get a list of all admin users (superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has admins array\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "        pm.expect(jsonData.admins).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Get a specific user by ID (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user._id).to.eql(pm.environment.get(\"userId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Admin (Superadmin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"New Admin\",\n    \"email\": \"newadmin@example.com\",\n    \"password\": \"adminpassword\",\n    \"phoneNumber\": \"+2341234567892\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/create-admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "create-admin"]
            },
            "description": "Create a new admin user (superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    pm.test(\"Admin created successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "        pm.expect(jsonData.message).to.include('created');",
                  "        pm.expect(jsonData.admin).to.be.an('object');",
                  "        pm.expect(jsonData.admin.role).to.eql('admin');",
                  "        ",
                  "        // Save the new admin ID for later use",
                  "        pm.environment.set(\"newAdminId\", jsonData.admin._id);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"Updated User Name\",\n    \"email\": \"updated@example.com\",\n    \"phoneNumber\": \"+2341234567893\",\n    \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "Update a user's information (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user.fullName).to.eql('Updated User Name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Role (Superadmin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "role"]
            },
            "description": "Update a user's role (superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"User role updated successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "        pm.expect(jsonData.message).to.include('role');",
                  "        pm.expect(jsonData.user).to.be.an('object');",
                  "        pm.expect(jsonData.user.role).to.eql('admin');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User (Superadmin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{newAdminId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{newAdminId}}"]
            },
            "description": "Delete a user (superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"User deleted successfully\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "        pm.expect(jsonData.message).to.include('deleted');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Campaigns",
      "description": "Endpoints for campaign management",
      "item": [
        {
          "name": "Create Campaign (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Help Build a Mosque in Lagos",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "We are raising funds to build a new mosque in Lagos community...",
                  "type": "text"
                },
                {
                  "key": "amountNeeded",
                  "value": "5000000",
                  "type": "text"
                },
                {
                  "key": "bankAccountNumber",
                  "value": "0123456789",
                  "type": "text"
                },
                {
                  "key": "bankAccountName",
                  "value": "Islamic Fundraiser",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "First Bank",
                  "type": "text"
                },
                {
                  "key": "images",
                  "type": "file",
                  "src": "/path/to/image1.jpg"
                },
                {
                  "key": "images",
                  "type": "file",
                  "src": "/path/to/image2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/campaigns",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns"]
            },
            "description": "Create a new fundraising campaign (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Campaign created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('created');",
                  "    pm.expect(jsonData.campaign).to.be.an('object');",
                  "    pm.expect(jsonData.campaign._id).to.be.a('string');",
                  "    ",
                  "    // Save the campaign ID for later use",
                  "    pm.environment.set(\"campaignId\", jsonData.campaign._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Campaigns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/campaigns",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns"],
              "query": [
                {
                  "key": "status",
                  "value": "active",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "mosque",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "newest",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all campaigns with optional filtering"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has campaigns array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.campaigns).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Active Campaigns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "active"]
            },
            "description": "Get a list of all active campaigns"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has active campaigns\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.campaigns).to.be.an('array');",
                  "    ",
                  "    // Check that all campaigns are active",
                  "    if (jsonData.campaigns.length > 0) {",
                  "        jsonData.campaigns.forEach(function(campaign) {",
                  "            pm.expect(campaign.status).to.eql('active');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Completed Campaigns",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/completed",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "completed"]
            },
            "description": "Get a list of all completed campaigns"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has completed campaigns\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.campaigns).to.be.an('array');",
                  "    ",
                  "    // Check that all campaigns are completed",
                  "    if (jsonData.campaigns.length > 0) {",
                  "        jsonData.campaigns.forEach(function(campaign) {",
                  "            pm.expect(campaign.status).to.eql('completed');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Campaign by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "{{campaignId}}"]
            },
            "description": "Get a specific campaign by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has campaign data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.campaign).to.be.an('object');",
                  "    pm.expect(jsonData.campaign._id).to.eql(pm.environment.get(\"campaignId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Campaign (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Mosque Project in Lagos\",\n    \"description\": \"Updated description for the mosque project...\",\n    \"amountNeeded\": 6000000,\n    \"bankAccountNumber\": \"0123456789\",\n    \"bankAccountName\": \"Islamic Fundraiser\",\n    \"bankName\": \"First Bank\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "{{campaignId}}"]
            },
            "description": "Update a campaign's information (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Campaign updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "    pm.expect(jsonData.campaign).to.be.an('object');",
                  "    pm.expect(jsonData.campaign.title).to.eql('Updated Mosque Project in Lagos');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Campaign Images (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "images",
                  "type": "file",
                  "src": "/path/to/new-image1.jpg"
                },
                {
                  "key": "images",
                  "type": "file",
                  "src": "/path/to/new-image2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/{{campaignId}}/images",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "{{campaignId}}", "images"]
            },
            "description": "Update a campaign's images (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Campaign images updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('images');",
                  "    pm.expect(jsonData.campaign).to.be.an('object');",
                  "    pm.expect(jsonData.campaign.images).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Campaign Status (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"completed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/{{campaignId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "{{campaignId}}", "status"]
            },
            "description": "Update a campaign's status (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Campaign status updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('completed');",
                  "    pm.expect(jsonData.campaign).to.be.an('object');",
                  "    pm.expect(jsonData.campaign.status).to.eql('completed');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Campaign (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "campaigns", "{{campaignId}}"]
            },
            "description": "Delete a campaign (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Campaign deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Applications",
      "description": "Endpoints for application management",
      "item": [
        {
          "name": "Submit Application",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Application for Mosque Project",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "I would like to apply for assistance with the mosque project...",
                  "type": "text"
                },
                {
                  "key": "fullName",
                  "value": "John Doe",
                  "type": "text"
                },
                {
                  "key": "email",
                  "value": "john@example.com",
                  "type": "text"
                },
                {
                  "key": "additionalDetails",
                  "value": "Additional information about my application...",
                  "type": "text"
                },
                {
                  "key": "campaign",
                  "value": "{{campaignId}}",
                  "type": "text"
                },
                {
                  "key": "proofDocuments",
                  "type": "file",
                  "src": "/path/to/document1.pdf"
                },
                {
                  "key": "proofDocuments",
                  "type": "file",
                  "src": "/path/to/document2.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications"]
            },
            "description": "Submit a new application for a campaign"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Application submitted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('submitted');",
                  "    pm.expect(jsonData.application).to.be.an('object');",
                  "    pm.expect(jsonData.application._id).to.be.a('string');",
                  "    ",
                  "    // Save the application ID for later use",
                  "    pm.environment.set(\"applicationId\", jsonData.application._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Applications (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications"],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "disabled": true
                },
                {
                  "key": "campaign",
                  "value": "{{campaignId}}",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "newest",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of all applications with optional filtering (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has applications array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.applications).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User's Applications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/applications/my-applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications", "my-applications"]
            },
            "description": "Get a list of the authenticated user's applications"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user's applications\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.applications).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Application by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/applications/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications", "{{applicationId}}"]
            },
            "description": "Get a specific application by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has application data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.application).to.be.an('object');",
                  "    pm.expect(jsonData.application._id).to.eql(pm.environment.get(\"applicationId\"));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Application Status (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"approved\",\n    \"message\": \"Your application has been approved. We will contact you soon.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/applications/{{applicationId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications", "{{applicationId}}", "status"]
            },
            "description": "Update an application's status (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Application status updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('approved');",
                  "    pm.expect(jsonData.application).to.be.an('object');",
                  "    pm.expect(jsonData.application.status).to.eql('approved');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Application (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/applications/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications", "{{applicationId}}"]
            },
            "description": "Delete an application (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Application deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Notifications",
      "description": "Endpoints for notification management",
      "item": [
        {
          "name": "Get User's Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            },
            "description": "Get a list of the authenticated user's notifications"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has notifications array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.notifications).to.be.an('array');",
                  "    ",
                  "    // Save a notification ID for later use if available",
                  "    if (jsonData.notifications.length > 0) {",
                  "        pm.environment.set(\"notificationId\", jsonData.notifications[0]._id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Unread Notifications Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/unread-count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "unread-count"]
            },
            "description": "Get the count of unread notifications for the authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has unread count\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/{{notificationId}}/read",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "{{notificationId}}", "read"]
            },
            "description": "Mark a specific notification as read"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Notification marked as read\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('read');",
                  "    pm.expect(jsonData.notification).to.be.an('object');",
                  "    pm.expect(jsonData.notification.isRead).to.eql(true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/mark-all-read",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "mark-all-read"]
            },
            "description": "Mark all of the authenticated user's notifications as read"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All notifications marked as read\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('all');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Notification",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/{{notificationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "{{notificationId}}"]
            },
            "description": "Delete a notification"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Notification deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Messages",
      "description": "Endpoints for messaging",
      "item": [
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"I have additional information to provide.\",\n    \"application\": \"{{applicationId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/messages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "messages"]
            },
            "description": "Send a message related to an application"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Message sent successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include('sent');",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "    pm.expect(jsonData.data._id).to.be.a('string');",
                  "    ",
                  "    // Save the message ID for later use",
                  "    pm.environment.set(\"messageId\", jsonData.data._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Messages for Application",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/messages/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "messages", "{{applicationId}}"]
            },
            "description": "Get all messages for a specific application"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has messages array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.messages).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Dashboard",
      "description": "Endpoints for dashboard statistics (admin/superadmin only)",
      "item": [
        {
          "name": "Get Dashboard Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            },
            "description": "Get statistics for the dashboard (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has dashboard stats\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.stats).to.be.an('object');",
                  "    pm.expect(jsonData.stats.campaigns).to.be.an('object');",
                  "    pm.expect(jsonData.stats.applications).to.be.an('object');",
                  "    pm.expect(jsonData.stats.users).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Recent Activities",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/recent-activities",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "recent-activities"]
            },
            "description": "Get recent activities for the dashboard (admin/superadmin only)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has recent activities\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.activities).to.be.an('object');",
                  "    pm.expect(jsonData.activities.recentCampaigns).to.be.an('array');",
                  "    pm.expect(jsonData.activities.recentApplications).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ]
}
